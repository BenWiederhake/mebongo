// wasm-pack build --target web

#[macro_use]
extern crate lazy_static;
#[macro_use]
extern crate static_assertions;

use wasm_bindgen::prelude::*;

mod board;
mod search;
mod tile;

#[wasm_bindgen]
extern {
    pub fn alert(s: &str);
}

pub const VERSION: usize = 42;

#[wasm_bindgen]
pub fn check_config(
    version: usize,
    max_board_w: u8,
    max_board_h: u8,
    max_tile_size: u8,
    total_tiles: usize,
) -> u32 {
    if version != VERSION { return 1; }
    if max_board_w != board::MAX_WIDTH { return 2; }
    if max_board_h != board::MAX_HEIGHT { return 3; }
    if max_tile_size != tile::MAX_SIZE { return 4; }
    if total_tiles != tile::ALL_TILES.len() { return 5; }

    // Random number that is unlikely to have been generated by accident:
    134250805
}

#[wasm_bindgen]
pub fn greet(name: &str) {
    alert(&format!("Hello, {}!", name));
}

pub fn pseudo_main() {
    let mut is_first_tile = true;
    for tile in tile::ALL_TILES.iter() {
        if !is_first_tile {
            println!("==");
        } else {
            is_first_tile = false;
        }
        let mut is_first_layout = true;
        for layout in tile.get_layouts() {
            if !is_first_layout {
                println!("-");
            } else {
                is_first_layout = false;
            }
            for y in 0..tile::MAX_SIZE {
                print!("    ");
                for x in 0..tile::MAX_SIZE {
                    let symbol = if layout.is_present_at(x, y) {
                        'X'
                    } else {
                        'Â·'
                    };
                    print!("{}", symbol);
                }
                println!();
            }
        }
    }
    let b = board::Board::all_blocked();
    println!("{:?} is all_blocked {}", &b, b.is_all_blocked());
}
